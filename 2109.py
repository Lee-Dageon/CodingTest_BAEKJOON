# 순회강연
# n(0부터 10000까지)개의 대학에서 강연 요청
# d(0부터 10000까지)일 안에 강연을 하면 p만큼의 강연료를 지불
# 가장 많은 돈을 벌 수 있도록 순회강연
# 하루에 최대 한 곳에서만 강연

# 그리디
n = int(input())    # n개의 대학

# 강연 요청을 p 기준으로 내림차순 정렬
# 마감일 d 보다 작거나 같은 날 중에서 가장 늦은 날을 찾아서 강연 배정
# 이미 사용한 날짜는 건너뛴다

# 지금까지 가능한 날짜 수보다 강연이 많아지면
# 그 중에서 가장 돈이 적은 강연 하나를 버림


# 7
# 20 1
# 2 1
# 10 3
# 100 2
# 8 2
# 5 20
# 50 10

tasks = [[] for _ in range(10001)]  #1일부터 10000일 대학 강연 요청 리스트


for _ in range(n):
    p, d = map(int, input().split())
    tasks[d].append(p)  # 해당 날짜에 강연 요청 삽입

# [], [20, 2], [100, 8], [10], [], [], [], [], [], [], [50], [], [], [], [], [], [], [], [], [], [5], [], [], [], [], [], [], []

import heapq

# 하루에 한 곳만 강연 가능
# 최대 힙
max_heap = []
answer = 0
for day in range(10000, 0, -1):  #10000일부터 1일까지 거꾸로 강연 배정
    for pay in tasks[day]:       #해당 day의 강연료를 전부 최대 힙에 추가
        heapq.heappush(max_heap, -pay)

    if max_heap:
        answer += -heapq.heappop(max_heap)

print(answer)
